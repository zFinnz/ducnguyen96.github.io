<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>backend on Thỉnh thoảng đôi lời</title><link>/categories/backend/</link><description>Recent content in backend on Thỉnh thoảng đôi lời</description><generator>Hugo -- gohugo.io</generator><language>vi-vn</language><copyright>ducnguyen96</copyright><lastBuildDate>Mon, 30 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/backend/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript in a nutshell</title><link>/posts/backend/javascript-in-a-nutshell/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/backend/javascript-in-a-nutshell/</guid><description>Do bài viết có rất nhiều mục và dài nên bạn đọc nhìn vào Table Of Content (TOC) ở side-bar bên phải để đọc mục mình quan tâm nhé.
Variables var &amp;ldquo;var&amp;rdquo; không có block scope
if (true) { var test = true; // dùng &amp;#34;var&amp;#34; thay &amp;#34;let&amp;#34; } alert(test); // true, var không có block scope nên nó được kéo ra khỏi block scope. Nếu một block nằm trong 1 function thì var sẽ trở thành biến function-level</description></item><item><title>Authentication in a nutshell</title><link>/posts/backend/authentication-in-a-nutshell/</link><pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/backend/authentication-in-a-nutshell/</guid><description>Như đã nói trong bài này, http không giữ trạng thái giữa 2 lần request vì vậy ví dụ sau khi đăng nhập sau, user đến một page nào đó cần xác minh chẳng hạn như setting thì user lại bị yêu cầu đăng nhập lần nữa. Nhưng với session hoặc token authentication thì server có thể nhận biết là user đã đăng nhập và nên được cấp quyền truy cập.</description></item><item><title>HTTP in a nutshell</title><link>/posts/backend/http-in-a-nutshell/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/backend/http-in-a-nutshell/</guid><description>Hypertext Transfer Protocol (HTTP) là một giao thức(protocol) thuộc lớp ứng dụng được thiết kế cho để thực hiện giao tiếp giữa web browsers và web servers, nhưng nó cũng được sử dụng cho nhiều mục đích khác. HTTP tuân theo mô hình client-server cổ điển, với một client open connection để tạo request, sau đó chờ cho đến khi nhận được response. HTTP là một giao thức không có trạng thái, nghĩa là server không dữ trạng thái giữa 2 lần requests.</description></item><item><title>Database indexing cơ bản</title><link>/posts/databases/database-indexing/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/databases/database-indexing/</guid><description>Những kiến thức dưới đây sẽ áp dụng được với postgres còn những database khác thì mình không chắc nhé.
Row được lưu như thế nào ? Cấu trúc được sử dụng để lưu trữ 1 table là 1 heap file - list các page có fixed size (thường là 8Kb). Trong 1 table thì tất cả các page đều tương đương về mặt logic, nên 1 row cụ thể có thể được lưu trữ ở bất kỳ page nào.</description></item><item><title>Transaction in a nutshell</title><link>/posts/databases/transaction-in-a-nutshell/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/databases/transaction-in-a-nutshell/</guid><description>Transaction có thể được định nghĩa là 1 nhóm task. Một task đơn lẻ là 1 đơn vị xử lý mà không thể chia nhỏ hơn nữa.
Lấy một ví dụ đơn giản. Giả sử một nhân viên ngân hàng chuyển 500 triệu từ tài khoản A đến tài khoản B. Đây là một transaction đơn giản chứa những task sau đây.
A&amp;rsquo;s Account
Open_Account(A) Old_Balance = A.balance New_Balance = Old_Balance - 500 A.</description></item><item><title>ACID trong cơ sở dữ liệu</title><link>/posts/databases/acid-in-dbms/</link><pubDate>Tue, 24 Aug 2021 10:00:27 +0000</pubDate><guid>/posts/databases/acid-in-dbms/</guid><description>Transaction là một đơn vị logic nó thực hiện việc truy xuất và chỉnh sửa nội dung của database. Để duy trì tính thống nhất cả database trước và sau khi thực hiện transaction thì cần tuân theo một số tính chất và được viết tắt là ACID
Atomicity (/æt.əˈmɪs.ɪ.ti/) Yêu cầu transaction phải thực hiện 1 cách hoàn chỉnh hoặc là không thực hiện, chứ không có việc chỉ thực hiện 1 phần.</description></item><item><title>Cài đặt docker, nginx, cloudflare, tmate và deploy một web app hoàn toàn free trên raspberry pi</title><link>/posts/devops/cai-dat-docker-nginx-cloudflare-tmate-va-deploy-mot-web-app-hoan-toan-free-tren-raspberry-pi/</link><pubDate>Wed, 14 Jul 2021 08:23:27 +0000</pubDate><guid>/posts/devops/cai-dat-docker-nginx-cloudflare-tmate-va-deploy-mot-web-app-hoan-toan-free-tren-raspberry-pi/</guid><description>1. Cài đặt image cho Pi Cài đặt Raspbian bằng raspberry pi imager Lưu ý: Raspberry Pi chạy chip ARM và Raspbian ở kiến trúc arm/v7 32bit nên các cài đặt ở phía dưới đều phải dùng cho kiến trúc này.
2. Cài tmate để ssh Chúng ta dùng tmate bản static build arm/v7 32bit để có đầy đủ tính năng mới nhất như chạy foreground (-F).
wget https://github.com/tmate-io/tmate/releases/download/2.4.0/dbg-symbols-tmate-2.4.0-static-linux-arm32v7.tar.xz Đăng ký API key để có static IP và session name giống nhau cho mỗi lần đăng nhập vào con Pi.</description></item><item><title>Docker nền tảng</title><link>/posts/backend/docker-fundamentals/</link><pubDate>Thu, 08 Jul 2021 08:45:15 +0000</pubDate><guid>/posts/backend/docker-fundamentals/</guid><description>Ở chương trước ta đã hoàn thành build một web server trên 1 máy chủ thuê của AWS với 1 phiên bản nginx cụ thể và mọi thứ vẫn hoạt động hoàn hảo.
Tuy nhiên, hiện tại thì nginx phụ thuộc hoàn toàn vào os mà máy chủ đang dùng. Nếu os có update lên phiên bản mới hoặc các ứng dụng khác trên os cập nhật hoặc bạn cài đặt thêm ứng dụng khác trên os gây xung đột với phiên bản nginx hiện tại thì sẽ ảnh hưởng đến sản phẩm của chúng ta.</description></item></channel></rss>
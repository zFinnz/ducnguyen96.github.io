{"version":3,"sources":["pages/index.tsx","AppRoute.tsx","hooks/useAuthenticated.ts","App.tsx","reportWebVitals.ts","apollo/client.ts","index.tsx","common/helpers.ts","hooks/useCurrentUser.ts","graphql/queries/me.generated.tsx","common/enum.ts","graphql/type.interface.ts","components/Activator/index.tsx","components/EditActivatorModal/index.tsx","components/Footer/index.tsx","components/HistorySeletor/index.tsx","common/constants.ts","components/Navigation/index.tsx","graphql/mutations/updateUserSetting.generated.tsx","components/ConfirmModal/index.tsx","components/Settings/index.tsx","graphql/mutations/updateHistoryMetadata.generated.tsx","graphql/mutations/updateUserVapidKey.generated.tsx","graphql/queries/getHistory.generated.tsx","graphql/queries/getHistoryMetadata.generated.tsx","pages/Home/index.tsx"],"names":["RenderLazyPage","LazyPage","lazy","props","fallback","LoginPage","RootRouter","memo","isLogin","useCurrentUser","useState","login","setLogin","Fragment","path","render","exact","Home","to","App","useMeQuery","fetchPolicy","errorPolicy","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","authMiddleware","ApolloLink","operation","forward","headers","getContext","setContext","document","cookie","splitCookie","split","token","authorization","client","ApolloClient","link","from","cache","InMemoryCache","possibleTypes","name","version","queryDeduplication","defaultOptions","watchQuery","connectToDevTools","process","ReactDOM","ApolloProvider","getElementById","createCookie","value","days","expires","date","Date","setTime","getTime","toUTCString","removeAuthCookie","window","location","reload","checkIfIOS","userUrgent","toLowerCase","includes","dateToHours","input","hours","getHours","minutes","getMinutes","pickTimerBackgroundColor","isDrank","createdAt","today","getDate","pickDrinkSpanColor","useApolloClient","data","readQuery","query","MeDocument","me","gql","baseOptions","options","Apollo","ErrorEnum","ClickObjectEnum","GENDER","NAMESPACE","Activator","metadata","handleOnclickActivator","className","map","activator","index","src","alt","onClick","id","containerImage","containerVolume","drinkAt","drinkAtATime","drankAt","CONTAINER","style","backgroundColor","padding","color","TIMER","display","EditActivatorModal","defaultValue","onClickCancelModal","onClickSaveModal","timerValue","setTimerValue","useEffect","bottom","type","required","onChange","e","target","handleOnChangeTimer","Footer","goal","drank","width","HistorySelector","histories","handleOnclickDateCircle","selectedIndex","history","dateStatus","historyDate","date-status","data-active","height","progress","monthNames","Navigation","selectedDate","onClickOpenSettings","month","getMonth","day","UpdateUserSettingDocument","ConfirmModal","handleCancelModal","handleOnOkModal","Settings","handleCloseSetting","user","wakeUpTime","setWakeUpTime","sleepTime","setSleepTime","gender","setGender","weight","setWeight","intake","setIntake","remind","setRemind","openModal","setOpenModal","setDrinkAtATime","setContainerVolume","useUpdateUserSettingMutation","onError","console","log","onCompleted","res","updateUserSetting","dailyIntake","remindMe","right","checked","handleOnchangeWakeUpTime","handleOnchangeSleepTime","MALE","FEMALE","onChangeWeight","handleOnChangeIntake","handleOnChangeDrinkAtATime","handleOnChangeContainerVolume","Number","wakeUpHour","wakeUpMinute","sleepHour","sleepMinute","newWakeUp","setHours","setMinutes","newSleep","variables","UpdateHistoryMetadataDocument","UpdateUserVapidKeyDocument","GetHistoryDocument","GetHistoryMetadataDocument","messaging","isISO","navigator","userAgent","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firstRender","HomePage","React","currentUser","setHistories","selectedHistory","setSelectedHistory","setSelectedIndex","useGetHistoryQuery","getHistoryData","getHistoryError","error","getHistoryLoading","modalDisplay","setModalDisplay","selectedActivator","setSelectedActivator","openSetting","setOpenSetting","graphQLErrors","forEach","extensions","response","statusCode","selectedMetadata","setSelectedMetadata","selectedMetadataData","useGetHistoryMetadataQuery","historyId","useUpdateHistoryMetadataMutation","updateHistoryMetadata","updatedHistories","JSON","parse","stringify","updatedSelectedHistory","updateMetadata","getHistory","todayHistory","find","findIndex","getHistoryMetadata","useUpdateUserVapidKeyMutation","localStorage","setItem","updateUserVapidKey","getItem","Notification","requestPermission","permission","getToken","vapidKey","currentToken","objectType","time","length","slice","setSeconds"],"mappings":"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","file":"static/js/main.b949f909.chunk.js","sourcesContent":["import React, { lazy, LazyExoticComponent, Suspense } from \"react\";\n\nconst RenderLazyPage = ({\n  lazy: LazyPage,\n  ...props\n}: {\n  lazy: LazyExoticComponent<any>;\n}) => {\n  return (\n    <Suspense fallback={<p>Loading</p>}>\n      <LazyPage {...props} />\n    </Suspense>\n  );\n};\n\nexport const HomePage = () => (\n  <RenderLazyPage lazy={lazy(() => import(\"./Home\"))} />\n);\nexport const LoginPage = ({ ...props }) => (\n  <RenderLazyPage lazy={lazy(() => import(\"./Login\"))} {...props} />\n);\n","import React, { memo, useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport useAuthenticated from \"./hooks/useAuthenticated\";\nimport { LoginPage } from \"./pages\";\nimport HomePage from \"./pages/Home\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nexport const RootRouter = memo(() => {\n  const isLogin = useAuthenticated();\n\n  const [login, setLogin] = useState(isLogin);\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route\n            path={\"/projects/drinkwater/login\"}\n            render={() => <LoginPage setLogin={setLogin} />}\n            exact\n          />\n          <Route\n            path={\"/\"}\n            render={() =>\n              login ? (\n                <HomePage />\n              ) : (\n                <Redirect to=\"/projects/drinkwater/login\" />\n              )\n            }\n          />\n          <Redirect\n            path=\"/projects/drinkwater/login\"\n            to={\"/projects/drinkwater/login\"}\n          />\n          <Redirect path=\"*\" to={\"/404\"} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n});\n","import useCurrentUser from \"./useCurrentUser\";\n\nexport default function useAuthenticated(): boolean {\n  const currentUser = useCurrentUser();\n  return !!currentUser;\n}\n","import { memo } from \"react\";\nimport { RootRouter } from \"./AppRoute\";\nimport { useMeQuery } from \"./graphql/queries/me.generated\";\n\nconst App: React.FC = memo(() => {\n  const { loading } = useMeQuery({\n    fetchPolicy: \"network-only\",\n    errorPolicy: \"ignore\",\n  });\n  if (loading) return <p>Loading</p>;\n  return <RootRouter />;\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  from,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport possibleTypes from \"./possibleTypes.json\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://ducnguyen96.xyz/graphql\",\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  const { headers } = operation.getContext();\n\n  operation.setContext(() => {\n    const cookie = document.cookie;\n    if (!cookie) return;\n\n    const splitCookie = document.cookie.split(\"=\");\n    if (splitCookie[0] !== \"accessToken\") {\n      return;\n    }\n\n    const token = splitCookie[1];\n\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  });\n\n  return forward(operation);\n});\n\nexport const client = new ApolloClient({\n  link: from([authMiddleware, httpLink]),\n  cache: new InMemoryCache({ possibleTypes: possibleTypes.possibleTypes }),\n  // uri: \"http://localhost:3001/graphql\",\n  name: \"drinkwater-client\",\n  version: \"1.0\",\n  queryDeduplication: false,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: \"cache-first\",\n    },\n  },\n  connectToDevTools: process.env.NODE_ENV !== \"production\",\n});\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./apollo/client\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const createCookie = (name: string, value: string, days: number) => {\n  let expires = \"\";\n  if (days) {\n    let date = new Date();\n    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n    expires = \"; expires=\" + date.toUTCString();\n  }\n  document.cookie = name + \"=\" + value + expires + \"; path=/\";\n};\n\nexport const removeAuthCookie = () => {\n  document.cookie = \"accessToken=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n  window.location.reload();\n};\n\nexport const checkIfIOS = (userUrgent: String) => {\n  const lowCase = userUrgent.toLowerCase();\n  return lowCase.includes(\"iphone\");\n};\n\nexport const dateToHours = (input: string): string => {\n  const date = new Date(input);\n  // const utc = new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  return `${hours > 9 ? hours : `0${hours}`}:${\n    minutes > 9 ? minutes : `0${minutes}`\n  }`;\n};\n\nexport const pickTimerBackgroundColor = (\n  isDrank: boolean,\n  createdAt: string,\n  today: number\n): string => {\n  if (isDrank) return \"var(--toggle-icon-color)\";\n  const created = new Date(createdAt).getDate();\n  return created === today ? \"var(--icon-color)\" : \"var(--primary-color)\";\n};\n\nexport const pickDrinkSpanColor = (\n  isDrank: boolean,\n  createdAt: string,\n  today: number\n): string => {\n  if (isDrank) return \"white\";\n  const created = new Date(createdAt).getDate();\n  return created === today ? \"#888\" : \"white\";\n};\n\nexport const getDate = (input: string): number => {\n  return new Date(input).getDate();\n};\n","import { useApolloClient } from \"@apollo/client\";\nimport { MeDocument, MeQueryResponse } from \"../graphql/queries/me.generated\";\n\nexport default function useCurrentUser() {\n  const client = useApolloClient();\n  try {\n    const data = client.readQuery<MeQueryResponse>({\n      query: MeDocument,\n    });\n    return data?.me;\n  } catch {\n    return undefined;\n  }\n}\n","import * as Types from \"../type.interface\";\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\nexport type MeQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type MeQueryResponse = { __typename?: \"Query\" } & {\n  me: { __typename?: \"UserEntity\" } & Pick<\n    Types.UserEntity,\n    | \"id\"\n    | \"username\"\n    | \"avatar\"\n    | \"remindMe\"\n    | \"wakeUpTime\"\n    | \"sleepTime\"\n    | \"gender\"\n    | \"weight\"\n    | \"dailyIntake\"\n    | \"containerImage\"\n    | \"containerVolume\"\n    | \"drinkAtATime\"\n    | \"vapidKey\"\n    | \"createdAt\"\n    | \"updatedAt\"\n  >;\n};\n\nexport const MeDocument = gql`\n  query me {\n    me {\n      id\n      username\n      avatar\n      remindMe\n      wakeUpTime\n      sleepTime\n      gender\n      weight\n      dailyIntake\n      containerImage\n      containerVolume\n      drinkAtATime\n      vapidKey\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQueryResponse, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<MeQueryResponse, MeQueryVariables>(\n    MeDocument,\n    options\n  );\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQueryResponse, MeQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<MeQueryResponse, MeQueryVariables>(\n    MeDocument,\n    options\n  );\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<\n  MeQueryResponse,\n  MeQueryVariables\n>;\n","export enum ErrorEnum {\n  UNAUTHORIZED = \"UNAUTHORIZED\",\n}\n\nexport enum ClickObjectEnum {\n  CONTAINER = \"CONTAINER\",\n  TIMER = \"TIMER\",\n}\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n  DateTime: any;\n};\n\nexport type CreateMessageInput = {\n  roomId: Scalars[\"String\"];\n  content: Scalars[\"String\"];\n};\n\nexport enum GENDER {\n  MALE = \"MALE\",\n  FEMALE = \"FEMALE\",\n}\n\nexport type HistoryEntity = Node & {\n  __typename?: \"HistoryEntity\";\n  id: Scalars[\"ID\"];\n  userId: Scalars[\"ID\"];\n  containerImage: Scalars[\"String\"];\n  containerVolume: Scalars[\"Float\"];\n  goal: Scalars[\"Float\"];\n  progress: Scalars[\"Float\"];\n  drinkAtATime: Scalars[\"Float\"];\n  createdAt: Scalars[\"DateTime\"];\n  updatedAt: Scalars[\"DateTime\"];\n};\n\nexport type HistoryMetadataEntity = Node & {\n  __typename?: \"HistoryMetadataEntity\";\n  id: Scalars[\"ID\"];\n  historyId: Scalars[\"ID\"];\n  containerImage: Scalars[\"String\"];\n  containerVolume: Scalars[\"Float\"];\n  drinkAtATime: Scalars[\"Float\"];\n  drinkAt: Scalars[\"DateTime\"];\n  drankAt?: Maybe<Scalars[\"DateTime\"]>;\n  createdAt: Scalars[\"DateTime\"];\n  updatedAt: Scalars[\"DateTime\"];\n};\n\nexport type MessageConnection = {\n  __typename?: \"MessageConnection\";\n  meta: PaginationMeta;\n  links: PaginationLinks;\n  items: Array<MessageEntity>;\n};\n\nexport type MessageEntity = Node & {\n  __typename?: \"MessageEntity\";\n  id: Scalars[\"ID\"];\n  userId: Scalars[\"ID\"];\n  roomId: Scalars[\"ID\"];\n  content: Scalars[\"String\"];\n  createdAt: Scalars[\"DateTime\"];\n  updatedAt: Scalars[\"DateTime\"];\n  user: UserEntity;\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  userRegister: RegisterPayload;\n  login: TokenPayloadDto;\n  updateUserVapidKey: Scalars[\"String\"];\n  updateUserSetting: UserEntity;\n  updateHistoryMetadata: HistoryMetadataEntity;\n  createRoom: RoomEntity;\n  createMessage: MessageEntity;\n};\n\nexport type MutationuserRegisterArgs = {\n  input: UserRegisterInput;\n};\n\nexport type MutationloginArgs = {\n  input: UserLoginInput;\n};\n\nexport type MutationupdateUserVapidKeyArgs = {\n  vapidKey: Scalars[\"String\"];\n};\n\nexport type MutationupdateUserSettingArgs = {\n  input: UpdateUserSettingInput;\n};\n\nexport type MutationupdateHistoryMetadataArgs = {\n  input: UpdateHistoryMetadataInput;\n};\n\nexport type MutationcreateRoomArgs = {\n  name: Scalars[\"String\"];\n  namespace: Scalars[\"String\"];\n};\n\nexport type MutationcreateMessageArgs = {\n  input: CreateMessageInput;\n};\n\nexport enum NAMESPACE {\n  TECH = \"TECH\",\n  MUSIC = \"MUSIC\",\n}\n\n/** Node */\nexport type Node = {\n  id: Scalars[\"ID\"];\n};\n\nexport type PaginationLinks = {\n  __typename?: \"PaginationLinks\";\n  first?: Maybe<Scalars[\"String\"]>;\n  previous?: Maybe<Scalars[\"String\"]>;\n  next?: Maybe<Scalars[\"String\"]>;\n  last?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type PaginationMeta = {\n  __typename?: \"PaginationMeta\";\n  itemCount: Scalars[\"Int\"];\n  totalItems: Scalars[\"Int\"];\n  itemsPerPage: Scalars[\"Int\"];\n  totalPages: Scalars[\"Int\"];\n  currentPage: Scalars[\"Int\"];\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  getHello: Scalars[\"String\"];\n  me: UserEntity;\n  getHistory: Array<HistoryEntity>;\n  getHistoryMetadata: Array<HistoryMetadataEntity>;\n  rooms: Array<RoomEntity>;\n  messages: MessageConnection;\n};\n\nexport type QuerygetHelloArgs = {\n  input: QueryUsersInput;\n};\n\nexport type QuerygetHistoryMetadataArgs = {\n  historyId: Scalars[\"String\"];\n};\n\nexport type QueryroomsArgs = {\n  namespace: Scalars[\"String\"];\n};\n\nexport type QuerymessagesArgs = {\n  input: QueryMessagesInput;\n};\n\nexport type QueryMessagesInput = {\n  page?: Maybe<Scalars[\"Float\"]>;\n  limit?: Maybe<Scalars[\"Float\"]>;\n  roomId: Scalars[\"String\"];\n};\n\nexport type QueryUsersInput = {\n  id: Scalars[\"String\"];\n};\n\nexport type RegisterPayload = {\n  __typename?: \"RegisterPayload\";\n  user: UserEntity;\n  token: TokenPayloadDto;\n};\n\nexport type RoomEntity = Node & {\n  __typename?: \"RoomEntity\";\n  id: Scalars[\"ID\"];\n  name: Scalars[\"String\"];\n  namespace: NAMESPACE;\n  image: Scalars[\"String\"];\n  createdAt: Scalars[\"DateTime\"];\n  updatedAt: Scalars[\"DateTime\"];\n};\n\nexport type TokenPayloadDto = {\n  __typename?: \"TokenPayloadDto\";\n  expiresIn: Scalars[\"Float\"];\n  accessToken: Scalars[\"String\"];\n};\n\nexport type UpdateHistoryMetadataInput = {\n  id: Scalars[\"String\"];\n  containerImage: Scalars[\"String\"];\n  containerVolume: Scalars[\"Float\"];\n  drinkAtATime: Scalars[\"Float\"];\n  drinkAt: Scalars[\"DateTime\"];\n  drankAt?: Maybe<Scalars[\"DateTime\"]>;\n};\n\nexport type UpdateUserSettingInput = {\n  remindMe: Scalars[\"Boolean\"];\n  wakeUpTime: Scalars[\"DateTime\"];\n  sleepTime: Scalars[\"DateTime\"];\n  gender: GENDER;\n  weight: Scalars[\"Float\"];\n  dailyIntake: Scalars[\"Float\"];\n  drinkAtATime?: Maybe<Scalars[\"Float\"]>;\n  containerVolume?: Maybe<Scalars[\"Float\"]>;\n};\n\nexport type UserEntity = Node & {\n  __typename?: \"UserEntity\";\n  id: Scalars[\"ID\"];\n  username: Scalars[\"String\"];\n  avatar: Scalars[\"String\"];\n  remindMe: Scalars[\"Boolean\"];\n  wakeUpTime: Scalars[\"DateTime\"];\n  sleepTime: Scalars[\"DateTime\"];\n  gender: GENDER;\n  weight: Scalars[\"Float\"];\n  dailyIntake: Scalars[\"Float\"];\n  containerImage: Scalars[\"String\"];\n  containerVolume: Scalars[\"Float\"];\n  drinkAtATime: Scalars[\"Float\"];\n  vapidKey?: Maybe<Scalars[\"String\"]>;\n  createdAt: Scalars[\"DateTime\"];\n  updatedAt: Scalars[\"DateTime\"];\n};\n\nexport type UserLoginInput = {\n  username: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n};\n\nexport type UserRegisterInput = {\n  username: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n  repeatPassword: Scalars[\"String\"];\n};\n","import React from \"react\";\nimport { ClickObjectEnum } from \"../../common/enum\";\nimport {\n  dateToHours,\n  getDate,\n  pickDrinkSpanColor,\n  pickTimerBackgroundColor,\n} from \"../../common/helpers\";\nimport {\n  HistoryMetadataEntity,\n  UpdateHistoryMetadataInput,\n} from \"../../graphql/type.interface\";\n\nexport interface ActivatorProps {\n  metadata: HistoryMetadataEntity[];\n  today: number;\n  handleOnclickActivator: (\n    input: UpdateHistoryMetadataInput,\n    objectType: ClickObjectEnum\n  ) => void;\n}\n\nconst Activator: React.SFC<ActivatorProps> = ({\n  metadata,\n  today,\n  handleOnclickActivator,\n}) => {\n  return (\n    <>\n      <section className=\"section__activator\">\n        {metadata.map((activator, index) => (\n          <div className=\"activator\" key={index}>\n            <img\n              className=\"glass-of-water\"\n              src=\"glass-of-water.png\"\n              alt=\"glass-of-water\"\n              onClick={() =>\n                handleOnclickActivator(\n                  {\n                    id: activator.id,\n                    containerImage: activator.containerImage,\n                    containerVolume: activator.containerVolume,\n                    drinkAt: activator.drinkAt,\n                    drinkAtATime: activator.drinkAtATime,\n                    drankAt: activator.drankAt,\n                  },\n                  ClickObjectEnum.CONTAINER\n                )\n              }\n            />\n            <span className=\"water-quantity\">{activator.drinkAtATime} ml</span>\n            <div\n              className=\"activator__timer\"\n              style={{\n                backgroundColor: pickTimerBackgroundColor(\n                  !!activator.drankAt,\n                  activator.drinkAt,\n                  today\n                ),\n                padding:\n                  getDate(activator.drinkAt) === today || !!activator.drankAt\n                    ? \".2rem .5rem .2rem .5rem\"\n                    : \"0 0 0 .5rem\",\n              }}\n            >\n              <span\n                style={{\n                  color: pickDrinkSpanColor(\n                    !!activator.drankAt,\n                    activator.drinkAt,\n                    today\n                  ),\n                }}\n                onClick={() =>\n                  handleOnclickActivator(\n                    {\n                      id: activator.id,\n                      containerImage: activator.containerImage,\n                      containerVolume: activator.containerVolume,\n                      drinkAt: activator.drinkAt,\n                      drinkAtATime: activator.drinkAtATime,\n                      drankAt: activator.drankAt,\n                    },\n                    ClickObjectEnum.TIMER\n                  )\n                }\n              >\n                {dateToHours(\n                  activator.drankAt ? activator.drankAt : activator.drinkAt\n                )}\n              </span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right.svg\"\n                alt=\"arrow-right\"\n                style={{\n                  display:\n                    getDate(activator.drinkAt) === today || !!activator.drankAt\n                      ? \"none\"\n                      : \"unset\",\n                }}\n              />\n            </div>\n          </div>\n        ))}\n      </section>\n    </>\n  );\n};\n\nexport default Activator;\n","import { useEffect, useState } from \"react\";\nimport \"./index.css\";\nexport interface EditActivatorModalProps {\n  defaultValue: string;\n  display: boolean;\n  onClickCancelModal: () => void;\n  onClickSaveModal: (time: string) => void;\n}\n\nexport const EditActivatorModal: React.SFC<EditActivatorModalProps> = ({\n  defaultValue,\n  display,\n  onClickCancelModal,\n  onClickSaveModal,\n}) => {\n  const [timerValue, setTimerValue] = useState<string>(defaultValue);\n  const handleOnChangeTimer = (e: any) => {\n    setTimerValue(e.target.value);\n  };\n  useEffect(() => {\n    setTimerValue(defaultValue);\n  }, [defaultValue]);\n  return (\n    <>\n      <div\n        className=\"edit-modal\"\n        style={{ bottom: display ? \"3rem\" : \"-45rem\" }}\n      >\n        <div className=\"top\">\n          <img src=\"images/glass-of-water.png\" alt=\"water\" />\n          <input\n            type=\"time\"\n            id=\"timer-input\"\n            required\n            value={timerValue}\n            onChange={(e) => {\n              handleOnChangeTimer(e);\n            }}\n          />\n          <button onClick={() => onClickSaveModal(timerValue)}>Save</button>\n        </div>\n        <button onClick={() => onClickCancelModal()}>Cancel</button>\n      </div>\n    </>\n  );\n};\n","export interface FooterProps {\n  goal: number;\n  drank: number;\n}\n\nconst Footer: React.SFC<FooterProps> = ({ goal, drank }) => {\n  return (\n    <>\n      <section className=\"section__footer\">\n        <div className=\"footer--left\">\n          <span className=\"footer__goal\">Goal: {goal} ml</span>\n          <div className=\"progress-bar\">\n            <div\n              className=\"progress\"\n              style={{ width: `${(drank / goal) * 100}%` }}\n            ></div>\n          </div>\n          <span className=\"footer__left\">{goal - drank} ml left</span>\n        </div>\n        <div className=\"footer--right\">\n          <img src=\"svg/edit.svg\" alt=\"edit\" />\n          <span>Add</span>\n          <span>change</span>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { HistoryEntity } from \"../../graphql/type.interface\";\n\nexport interface HistorySelectorProps {\n  histories: HistoryEntity[];\n  today: number;\n  selectedIndex: number;\n  handleOnclickDateCircle: (index: number) => void;\n}\n\nconst HistorySelector: React.SFC<HistorySelectorProps> = ({\n  histories,\n  today,\n  handleOnclickDateCircle,\n  selectedIndex,\n}) => {\n  return (\n    <>\n      <section className=\"section__date-selector\">\n        {histories.map((history, index) => {\n          let dateStatus = \"\";\n          const historyDate = new Date(history.createdAt).getDate();\n          switch (true) {\n            case today - historyDate === 1: {\n              dateStatus = \"yesterday\";\n              break;\n            }\n            case today - historyDate > 1: {\n              dateStatus = \"before-yesterday\";\n              break;\n            }\n            case today - historyDate === -1: {\n              dateStatus = \"tomorrow\";\n              break;\n            }\n            case today - historyDate < -1: {\n              dateStatus = \"after-tomorrow\";\n              break;\n            }\n            default: {\n              dateStatus = \"today\";\n              break;\n            }\n          }\n          return (\n            <div\n              className=\"date-circle\"\n              key={index}\n              date-status={dateStatus}\n              onClick={() => handleOnclickDateCircle(index)}\n              data-active={index === selectedIndex}\n            >\n              <div\n                className=\"circle-progress\"\n                style={{\n                  height: `${(history.progress / history.goal) * 100}%`,\n                }}\n              ></div>\n              <span>Day</span>\n              <span>{index + 1}</span>\n            </div>\n          );\n        })}\n      </section>\n    </>\n  );\n};\n\nexport default HistorySelector;\n","export const monthNames = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n","import React from \"react\";\nimport { monthNames } from \"../../common/constants\";\n\nexport interface NavigationProps {\n  today: number;\n  selectedDate: Date;\n  onClickOpenSettings: () => void;\n}\n\nconst Navigation: React.SFC<NavigationProps> = ({\n  today,\n  selectedDate,\n  onClickOpenSettings,\n}) => {\n  const month = monthNames[selectedDate.getMonth()];\n  const day = selectedDate.getDate();\n  return (\n    <>\n      <section className=\"section__header\">\n        <div className=\"section__header--left\">\n          {today !== day && (\n            <img className=\"icon\" src=\"svg/close_big.svg\" alt=\"cancel\" />\n          )}\n          <span>{today === day ? \"Today\" : day + \" \" + month}</span>\n        </div>\n        <div className=\"section__header--right\">\n          <img className=\"icon\" src=\"svg/bar_chart.svg\" alt=\"chart\" />\n          <img\n            className=\"icon\"\n            src=\"svg/settings_filled.svg\"\n            alt=\"settings_filled\"\n            onClick={() => onClickOpenSettings()}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Navigation;\n","import * as Types from \"../type.interface\";\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\nexport type UpdateUserSettingMutationVariables = Types.Exact<{\n  input: Types.UpdateUserSettingInput;\n}>;\n\nexport type UpdateUserSettingMutationResponse = { __typename?: \"Mutation\" } & {\n  updateUserSetting: { __typename?: \"UserEntity\" } & Pick<\n    Types.UserEntity,\n    | \"id\"\n    | \"username\"\n    | \"remindMe\"\n    | \"wakeUpTime\"\n    | \"sleepTime\"\n    | \"gender\"\n    | \"weight\"\n    | \"dailyIntake\"\n    | \"containerImage\"\n    | \"containerVolume\"\n    | \"drinkAtATime\"\n    | \"vapidKey\"\n    | \"createdAt\"\n    | \"updatedAt\"\n  >;\n};\n\nexport const UpdateUserSettingDocument = gql`\n  mutation updateUserSetting($input: UpdateUserSettingInput!) {\n    updateUserSetting(input: $input) {\n      id\n      username\n      remindMe\n      wakeUpTime\n      sleepTime\n      gender\n      weight\n      dailyIntake\n      containerImage\n      containerVolume\n      drinkAtATime\n      vapidKey\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport function useUpdateUserSettingMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateUserSettingMutationResponse,\n    UpdateUserSettingMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateUserSettingMutationResponse,\n    UpdateUserSettingMutationVariables\n  >(UpdateUserSettingDocument, options);\n}\nexport type UpdateUserSettingMutationHookResult = ReturnType<\n  typeof useUpdateUserSettingMutation\n>;\nexport type UpdateUserSettingMutationResult =\n  Apollo.MutationResult<UpdateUserSettingMutationResponse>;\nexport type UpdateUserSettingMutationOptions = Apollo.BaseMutationOptions<\n  UpdateUserSettingMutationResponse,\n  UpdateUserSettingMutationVariables\n>;\n","import \"./index.css\";\n\nexport interface ConfirmModalProps {\n  display: boolean;\n  handleCancelModal: () => void;\n  handleOnOkModal: () => void;\n}\n\nexport const ConfirmModal: React.SFC<ConfirmModalProps> = ({\n  display,\n  handleCancelModal,\n  handleOnOkModal,\n}) => {\n  return (\n    <>\n      <div\n        className=\"modal-wrapper\"\n        style={{ display: display ? \"flex\" : \"none\" }}\n      >\n        <div className=\"confirm-modal\">\n          <h3>Are you sure ?</h3>\n          <p>Schedule will be resetting from tomorrow!</p>\n          <div className=\"modal-buttons\">\n            <button\n              className=\"cancel-modal-button\"\n              onClick={() => {\n                handleCancelModal();\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"ok-modal-button\"\n              style={{\n                backgroundColor: \"var(--primary-color)\",\n                color: \"var(--text-color--white)\",\n              }}\n              onClick={() => {\n                handleOnOkModal();\n              }}\n            >\n              OK\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { dateToHours } from \"../../common/helpers\";\nimport { useUpdateUserSettingMutation } from \"../../graphql/mutations/updateUserSetting.generated\";\nimport {\n  GENDER,\n  UpdateUserSettingInput,\n  UserEntity,\n} from \"../../graphql/type.interface\";\nimport { ConfirmModal } from \"../ConfirmModal\";\nimport \"./index.css\";\n\nexport interface SettingsProps {\n  display: boolean;\n  handleCloseSetting: () => void;\n  user: UserEntity | undefined;\n}\n\nexport const Settings: React.SFC<SettingsProps> = ({\n  display,\n  handleCloseSetting,\n  user,\n}) => {\n  const [wakeUpTime, setWakeUpTime] = useState<string>(\"\");\n  const [sleepTime, setSleepTime] = useState<string>(\"\");\n  const [gender, setGender] = useState<GENDER>();\n  const [weight, setWeight] = useState<number>();\n  const [intake, setIntake] = useState<number>();\n  const [remind, setRemind] = useState<boolean>();\n  const [openModal, setOpenModal] = useState(false);\n  const [drinkAtATime, setDrinkAtATime] = useState<number>();\n  const [containerVolume, setContainerVolume] = useState<number>();\n\n  const [updateUserSetting] = useUpdateUserSettingMutation({\n    onError: (e) => console.log(e),\n    onCompleted: (res) => {\n      window.location.reload();\n    },\n  });\n\n  useEffect(() => {\n    setWakeUpTime(dateToHours(user?.wakeUpTime));\n    setSleepTime(dateToHours(user?.sleepTime));\n    setGender(user?.gender);\n    setWeight(user?.weight);\n    setIntake(user?.dailyIntake);\n    setRemind(user?.remindMe);\n    setDrinkAtATime(user?.drinkAtATime);\n    setContainerVolume(user?.containerVolume);\n  }, [user]);\n\n  const handleOnchangeWakeUpTime = (e: any) => {\n    setWakeUpTime(e.target.value);\n  };\n\n  const handleOnchangeSleepTime = (e: any) => {\n    setSleepTime(e.target.value);\n  };\n\n  const onClickGender = () => {\n    if (gender === GENDER.MALE) {\n      setGender(GENDER.FEMALE);\n    } else {\n      setGender(GENDER.MALE);\n    }\n  };\n\n  const onChangeWeight = (e: any) => {\n    setWeight(e.target.value);\n  };\n\n  const handleOnChangeIntake = (e: any) => {\n    setIntake(e.target.value);\n  };\n\n  const handleOnChangeDrinkAtATime = (e: any) => {\n    setDrinkAtATime(e.target.value);\n  };\n\n  const handleOnChangeContainerVolume = (e: any) => {\n    setContainerVolume(e.target.value);\n  };\n\n  const handleCancelModal = (): void => {\n    setOpenModal(false);\n  };\n\n  const handleOnChangeRemind = (): void => {\n    setRemind(!remind);\n  };\n\n  const handleOnOkModal = (): void => {\n    const input: UpdateUserSettingInput = {\n      dailyIntake: Number(intake),\n      gender: gender as GENDER,\n      remindMe: remind as boolean,\n      weight: Number(weight),\n      sleepTime: user?.sleepTime,\n      wakeUpTime: user?.wakeUpTime,\n      containerVolume: Number(containerVolume),\n      drinkAtATime: Number(drinkAtATime),\n    };\n\n    const [wakeUpHour, wakeUpMinute] = wakeUpTime.split(\":\");\n    const [sleepHour, sleepMinute] = sleepTime.split(\":\");\n\n    const newWakeUp = new Date(user?.wakeUpTime);\n    newWakeUp.setHours(+wakeUpHour);\n    newWakeUp.setMinutes(+wakeUpMinute);\n\n    const newSleep = new Date(user?.sleepTime);\n    newSleep.setHours(+sleepHour);\n    newSleep.setMinutes(+sleepMinute);\n\n    input.wakeUpTime = newWakeUp;\n    input.sleepTime = newSleep;\n\n    updateUserSetting({\n      variables: {\n        input,\n      },\n    });\n  };\n  return (\n    <>\n      <div className=\"settings\" style={{ right: display ? \"0\" : \"-100vw\" }}>\n        <p className=\"header\">Settings</p>\n        <img\n          className=\"icon\"\n          src=\"svg/chevron_big_right--black.svg\"\n          alt=\"arrow-right\"\n          onClick={() => handleCloseSetting()}\n        />\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Remind me to drink water</p>\n            <div className=\"setting_value\">\n              <label className=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  checked={remind}\n                  onChange={() => handleOnChangeRemind()}\n                />\n                <span className=\"slider round\"></span>\n              </label>\n            </div>\n          </div>\n          <div className=\"setting\">\n            <p>Wake up</p>\n            <div className=\"setting_value\">\n              <input\n                type=\"time\"\n                id=\"timer-input\"\n                required\n                value={wakeUpTime}\n                onChange={(e) => handleOnchangeWakeUpTime(e)}\n              />\n            </div>\n          </div>\n          <div className=\"setting\">\n            <p>Sleep</p>\n            <div className=\"setting_value\">\n              <input\n                type=\"time\"\n                id=\"timer-input\"\n                required\n                value={sleepTime}\n                onChange={(e) => handleOnchangeSleepTime(e)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Gender</p>\n            <div className=\"setting_value\">\n              <span onClick={() => onClickGender()}>{gender}</span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right--black.svg\"\n                alt=\"arrow-right\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Weight</p>\n            <div className=\"setting_value\">\n              <input\n                type=\"number\"\n                value={weight}\n                onChange={(e) => onChangeWeight(e)}\n              />{\" \"}\n              <span>Kg</span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right--black.svg\"\n                alt=\"arrow-right\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Level of motivation</p>\n            <div className=\"setting_value\">\n              <span>Beginner</span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right--black.svg\"\n                alt=\"arrow-right\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Daily intake</p>\n            <div className=\"setting_value\">\n              <input\n                type=\"number\"\n                value={intake}\n                onChange={(e) => handleOnChangeIntake(e)}\n              />\n              <span>ml</span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right--black.svg\"\n                alt=\"arrow-right\"\n              />\n            </div>\n          </div>\n          <div className=\"setting\">\n            <p>Drink at a time</p>\n            <div className=\"setting_value\">\n              <input\n                type=\"number\"\n                value={drinkAtATime}\n                onChange={(e) => handleOnChangeDrinkAtATime(e)}\n              />\n              <span>ml</span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right--black.svg\"\n                alt=\"arrow-right\"\n              />\n            </div>\n          </div>\n          <div className=\"setting\">\n            <p>Container Volume</p>\n            <div className=\"setting_value\">\n              <input\n                type=\"number\"\n                value={containerVolume}\n                onChange={(e) => handleOnChangeContainerVolume(e)}\n              />\n              <span>ml</span>\n              <img\n                className=\"icon\"\n                src=\"svg/chevron_big_right--black.svg\"\n                alt=\"arrow-right\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Hydration</p>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>My drinks</p>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Rate the app</p>\n          </div>\n          <div className=\"setting\">\n            <p>Feedback</p>\n          </div>\n        </div>\n        <div className=\"setting_section\">\n          <div className=\"setting\">\n            <p>Terms and Conditions</p>\n          </div>\n          <div className=\"setting\">\n            <p>Confidentiality</p>\n          </div>\n        </div>\n        <button\n          id=\"saveSettings\"\n          onClick={() => {\n            setOpenModal(true);\n          }}\n        >\n          Save\n        </button>\n      </div>\n      <ConfirmModal\n        display={openModal}\n        handleCancelModal={() => handleCancelModal()}\n        handleOnOkModal={() => handleOnOkModal()}\n      />\n    </>\n  );\n};\n","import * as Types from \"../type.interface\";\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\nexport type UpdateHistoryMetadataMutationVariables = Types.Exact<{\n  input: Types.UpdateHistoryMetadataInput;\n}>;\n\nexport type UpdateHistoryMetadataMutationResponse = {\n  __typename?: \"Mutation\";\n} & {\n  updateHistoryMetadata: { __typename?: \"HistoryMetadataEntity\" } & Pick<\n    Types.HistoryMetadataEntity,\n    | \"id\"\n    | \"historyId\"\n    | \"containerImage\"\n    | \"containerVolume\"\n    | \"drinkAtATime\"\n    | \"drinkAt\"\n    | \"drankAt\"\n    | \"createdAt\"\n    | \"updatedAt\"\n  >;\n};\n\nexport const UpdateHistoryMetadataDocument = gql`\n  mutation updateHistoryMetadata($input: UpdateHistoryMetadataInput!) {\n    updateHistoryMetadata(input: $input) {\n      id\n      historyId\n      containerImage\n      containerVolume\n      drinkAtATime\n      drinkAt\n      drankAt\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport function useUpdateHistoryMetadataMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateHistoryMetadataMutationResponse,\n    UpdateHistoryMetadataMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateHistoryMetadataMutationResponse,\n    UpdateHistoryMetadataMutationVariables\n  >(UpdateHistoryMetadataDocument, options);\n}\nexport type UpdateHistoryMetadataMutationHookResult = ReturnType<\n  typeof useUpdateHistoryMetadataMutation\n>;\nexport type UpdateHistoryMetadataMutationResult =\n  Apollo.MutationResult<UpdateHistoryMetadataMutationResponse>;\nexport type UpdateHistoryMetadataMutationOptions = Apollo.BaseMutationOptions<\n  UpdateHistoryMetadataMutationResponse,\n  UpdateHistoryMetadataMutationVariables\n>;\n","import * as Types from \"../type.interface\";\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\nexport type UpdateUserVapidKeyMutationVariables = Types.Exact<{\n  vapidKey: Types.Scalars[\"String\"];\n}>;\n\nexport type UpdateUserVapidKeyMutationResponse = {\n  __typename?: \"Mutation\";\n} & Pick<Types.Mutation, \"updateUserVapidKey\">;\n\nexport const UpdateUserVapidKeyDocument = gql`\n  mutation updateUserVapidKey($vapidKey: String!) {\n    updateUserVapidKey(vapidKey: $vapidKey)\n  }\n`;\nexport function useUpdateUserVapidKeyMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateUserVapidKeyMutationResponse,\n    UpdateUserVapidKeyMutationVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useMutation<\n    UpdateUserVapidKeyMutationResponse,\n    UpdateUserVapidKeyMutationVariables\n  >(UpdateUserVapidKeyDocument, options);\n}\nexport type UpdateUserVapidKeyMutationHookResult = ReturnType<\n  typeof useUpdateUserVapidKeyMutation\n>;\nexport type UpdateUserVapidKeyMutationResult =\n  Apollo.MutationResult<UpdateUserVapidKeyMutationResponse>;\nexport type UpdateUserVapidKeyMutationOptions = Apollo.BaseMutationOptions<\n  UpdateUserVapidKeyMutationResponse,\n  UpdateUserVapidKeyMutationVariables\n>;\n","import * as Types from \"../type.interface\";\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\nexport type GetHistoryQueryVariables = Types.Exact<{ [key: string]: never }>;\n\nexport type GetHistoryQueryResponse = { __typename?: \"Query\" } & {\n  getHistory: Array<\n    { __typename?: \"HistoryEntity\" } & Pick<\n      Types.HistoryEntity,\n      | \"id\"\n      | \"userId\"\n      | \"containerImage\"\n      | \"containerVolume\"\n      | \"goal\"\n      | \"progress\"\n      | \"drinkAtATime\"\n      | \"createdAt\"\n      | \"updatedAt\"\n    >\n  >;\n};\n\nexport const GetHistoryDocument = gql`\n  query getHistory {\n    getHistory {\n      id\n      userId\n      containerImage\n      containerVolume\n      goal\n      progress\n      drinkAtATime\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport function useGetHistoryQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetHistoryQueryResponse,\n    GetHistoryQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetHistoryQueryResponse, GetHistoryQueryVariables>(\n    GetHistoryDocument,\n    options\n  );\n}\nexport function useGetHistoryLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetHistoryQueryResponse,\n    GetHistoryQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetHistoryQueryResponse, GetHistoryQueryVariables>(\n    GetHistoryDocument,\n    options\n  );\n}\nexport type GetHistoryQueryHookResult = ReturnType<typeof useGetHistoryQuery>;\nexport type GetHistoryLazyQueryHookResult = ReturnType<\n  typeof useGetHistoryLazyQuery\n>;\nexport type GetHistoryQueryResult = Apollo.QueryResult<\n  GetHistoryQueryResponse,\n  GetHistoryQueryVariables\n>;\n","import * as Types from \"../type.interface\";\n\nimport { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nconst defaultOptions = {};\nexport type GetHistoryMetadataQueryVariables = Types.Exact<{\n  historyId: Types.Scalars[\"String\"];\n}>;\n\nexport type GetHistoryMetadataQueryResponse = { __typename?: \"Query\" } & {\n  getHistoryMetadata: Array<\n    { __typename?: \"HistoryMetadataEntity\" } & Pick<\n      Types.HistoryMetadataEntity,\n      | \"id\"\n      | \"historyId\"\n      | \"containerImage\"\n      | \"containerVolume\"\n      | \"drinkAtATime\"\n      | \"drinkAt\"\n      | \"drankAt\"\n      | \"createdAt\"\n      | \"updatedAt\"\n    >\n  >;\n};\n\nexport const GetHistoryMetadataDocument = gql`\n  query getHistoryMetadata($historyId: String!) {\n    getHistoryMetadata(historyId: $historyId) {\n      id\n      historyId\n      containerImage\n      containerVolume\n      drinkAtATime\n      drinkAt\n      drankAt\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport function useGetHistoryMetadataQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    GetHistoryMetadataQueryResponse,\n    GetHistoryMetadataQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<\n    GetHistoryMetadataQueryResponse,\n    GetHistoryMetadataQueryVariables\n  >(GetHistoryMetadataDocument, options);\n}\nexport function useGetHistoryMetadataLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetHistoryMetadataQueryResponse,\n    GetHistoryMetadataQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<\n    GetHistoryMetadataQueryResponse,\n    GetHistoryMetadataQueryVariables\n  >(GetHistoryMetadataDocument, options);\n}\nexport type GetHistoryMetadataQueryHookResult = ReturnType<\n  typeof useGetHistoryMetadataQuery\n>;\nexport type GetHistoryMetadataLazyQueryHookResult = ReturnType<\n  typeof useGetHistoryMetadataLazyQuery\n>;\nexport type GetHistoryMetadataQueryResult = Apollo.QueryResult<\n  GetHistoryMetadataQueryResponse,\n  GetHistoryMetadataQueryVariables\n>;\n","import { useState, useEffect } from \"react\";\n\nimport \"./index.css\";\nimport \"./style.css\";\n\n// This import loads the firebase namespace along with all its type information.\nimport firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport { ClickObjectEnum } from \"../../common/enum\";\nimport {\n  checkIfIOS,\n  removeAuthCookie,\n  dateToHours,\n} from \"../../common/helpers\";\nimport Activator from \"../../components/Activator\";\nimport { EditActivatorModal } from \"../../components/EditActivatorModal\";\nimport Footer from \"../../components/Footer\";\nimport HistorySelector from \"../../components/HistorySeletor\";\nimport Navigation from \"../../components/Navigation\";\nimport { Settings } from \"../../components/Settings\";\nimport { useUpdateHistoryMetadataMutation } from \"../../graphql/mutations/updateHistoryMetadata.generated\";\nimport { useUpdateUserVapidKeyMutation } from \"../../graphql/mutations/updateUserVapidKey.generated\";\nimport { useGetHistoryQuery } from \"../../graphql/queries/getHistory.generated\";\nimport { useGetHistoryMetadataQuery } from \"../../graphql/queries/getHistoryMetadata.generated\";\nimport {\n  HistoryEntity,\n  UpdateHistoryMetadataInput,\n  HistoryMetadataEntity,\n} from \"../../graphql/type.interface\";\nimport React from \"react\";\nimport useCurrentUser from \"../../hooks/useCurrentUser\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDeub1V35nG6gcS-hwjRBQxqFUs37upWTA\",\n  authDomain: \"drinkwater-8bc6a.firebaseapp.com\",\n  projectId: \"drinkwater-8bc6a\",\n  storageBucket: \"drinkwater-8bc6a.appspot.com\",\n  messagingSenderId: \"910438080317\",\n  appId: \"1:910438080317:web:882ac30523048f3592ef54\",\n  measurementId: \"G-SP6GNKBQFE\",\n};\n\nlet messaging: firebase.messaging.Messaging;\n\nconst isISO = checkIfIOS(navigator.userAgent);\n\nif (!isISO) {\n  firebase.initializeApp(firebaseConfig);\n  messaging = firebase.messaging();\n}\n\nconst today = new Date().getDate();\nlet firstRender = true;\n\nconst HomePage: React.SFC = React.memo(() => {\n  // Query histories\n  const currentUser = useCurrentUser();\n  const [histories, setHistories] = useState<HistoryEntity[]>([]);\n  const [selectedHistory, setSelectedHistory] = useState<HistoryEntity>();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const {\n    data: getHistoryData,\n    error: getHistoryError,\n    loading: getHistoryLoading,\n  } = useGetHistoryQuery();\n  const [modalDisplay, setModalDisplay] = useState(false);\n  const [selectedActivator, setSelectedActivator] =\n    useState<UpdateHistoryMetadataInput>();\n\n  const [openSetting, setOpenSetting] = useState(false);\n\n  if (getHistoryError) {\n    const errors = getHistoryError.graphQLErrors;\n    errors.forEach((error) => {\n      if (error.extensions?.response?.statusCode === 401) {\n        removeAuthCookie();\n      }\n    });\n  }\n\n  // Query Metadata\n  const [selectedMetadata, setSelectedMetadata] = useState<\n    HistoryMetadataEntity[]\n  >([]);\n\n  const { data: selectedMetadataData } = useGetHistoryMetadataQuery({\n    variables: { historyId: selectedHistory?.id || \"0\" },\n  });\n\n  const [updateMetadata] = useUpdateHistoryMetadataMutation({\n    onError: (e) => console.log(e),\n    onCompleted: (res) => {\n      // update histories\n      if (res.updateHistoryMetadata.drankAt) {\n        const updatedHistories = JSON.parse(JSON.stringify(histories));\n        const updatedSelectedHistory = updatedHistories[selectedIndex];\n        updatedSelectedHistory.progress =\n          updatedSelectedHistory.progress +\n          res.updateHistoryMetadata.drinkAtATime;\n        setHistories(updatedHistories);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (getHistoryData) {\n      setHistories(getHistoryData.getHistory);\n      if (firstRender) {\n        firstRender = false;\n        const todayHistory = getHistoryData.getHistory.find((history) => {\n          const historyDate = new Date(history.createdAt).getDate();\n          return historyDate === today;\n        }) as HistoryEntity;\n        setSelectedHistory(todayHistory);\n        const selectedIndex = getHistoryData.getHistory.findIndex(\n          (history) => history.id === todayHistory.id\n        );\n        setSelectedIndex(selectedIndex);\n      }\n    }\n  }, [getHistoryData]);\n\n  useEffect(() => {\n    if (selectedMetadataData)\n      setSelectedMetadata(selectedMetadataData?.getHistoryMetadata);\n  }, [selectedMetadataData]);\n\n  let drank = 0;\n  const goal = selectedHistory?.goal || 0;\n  selectedMetadataData?.getHistoryMetadata.forEach((data) => {\n    if (data.drankAt) {\n      drank = drank + data.drinkAtATime;\n    }\n  });\n\n  const handleOnclickDateCircle = (index: number): void => {\n    setSelectedHistory(histories[index]);\n    setSelectedIndex(index);\n  };\n\n  const handleOnclickActivator = (\n    input: UpdateHistoryMetadataInput,\n    objectType: ClickObjectEnum\n  ): void => {\n    if (objectType === ClickObjectEnum.CONTAINER) {\n      const drinkAtDate = new Date(input.drinkAt).getDate();\n      if (drinkAtDate !== today || input.drankAt) return;\n      updateMetadata({\n        variables: {\n          input: { ...input, drankAt: new Date() },\n        },\n      });\n    } else {\n      if (input.drankAt) return;\n      setSelectedActivator(input);\n      setModalDisplay(true);\n    }\n  };\n\n  const [updateUserVapidKey] = useUpdateUserVapidKeyMutation({\n    onError: (e) => console.log(e),\n    onCompleted: (res) => {\n      // update histories\n      window.localStorage.setItem(\"vapidKey\", res.updateUserVapidKey);\n      window.location.reload();\n    },\n  });\n\n  const updateVapidKey = () => {\n    const vapidKey = window.localStorage.getItem(\"vapidKey\");\n    if (vapidKey) return;\n    console.log(\"Requesting permission...\");\n    Notification.requestPermission().then((permission) => {\n      if (permission === \"granted\") {\n        console.log(\"Notification permission granted.\");\n        // TODO(developer): Retrieve a registration token for use with FCM.\n        // In many cases once an app has been granted notification permission,\n        // it should update its UI reflecting this.\n\n        messaging\n          .getToken({\n            vapidKey:\n              \"BI1u4QP6TwBnSzzH7BST_lyj8puXAww5p1jyENnCYNrMDRvuJDX4aX9DNAmuPUSFRhBl3lARC4uYfnpo-RtIKzU\",\n          })\n          .then((currentToken) => {\n            // update user vapid key\n            console.log(\"currentToken :\", currentToken);\n\n            updateUserVapidKey({\n              variables: {\n                vapidKey: currentToken,\n              },\n            });\n          });\n      } else {\n        console.log(\"Unable to get permission to notify.\");\n      }\n    });\n  };\n\n  if (!isISO) {\n    updateVapidKey();\n  }\n\n  const onClickCancelModal = () => {\n    setModalDisplay(false);\n  };\n\n  const onClickSaveModal = (time: string) => {\n    setModalDisplay(false);\n    const input = selectedActivator;\n    if (!input) return;\n    const drinkAt = new Date(input.drinkAt);\n    if (time.length < 6) {\n      drinkAt.setHours(+time.slice(0, 2));\n      drinkAt.setMinutes(+time.slice(3, 5));\n    }\n    drinkAt.setSeconds(0);\n    updateMetadata({\n      variables: {\n        input: { ...input, drinkAt },\n      },\n    });\n  };\n\n  const onClickOpenSettings = () => {\n    setOpenSetting(!openSetting);\n  };\n\n  return (\n    <>\n      {getHistoryLoading ? (\n        <h2>Loading...</h2>\n      ) : (\n        <>\n          <Navigation\n            today={today}\n            selectedDate={new Date(selectedHistory?.createdAt)}\n            onClickOpenSettings={() => onClickOpenSettings()}\n          />\n          <HistorySelector\n            histories={histories}\n            today={today}\n            handleOnclickDateCircle={(index) => handleOnclickDateCircle(index)}\n            selectedIndex={selectedIndex}\n          />\n          <Activator\n            metadata={selectedMetadata}\n            today={today}\n            handleOnclickActivator={(input, objectType) =>\n              handleOnclickActivator(input, objectType)\n            }\n          />\n          <Footer drank={drank} goal={goal} />\n          <div\n            className=\"overlay\"\n            style={{\n              display: modalDisplay ? \"block\" : \"none\",\n            }}\n            onClick={() => {\n              setModalDisplay(false);\n            }}\n          ></div>\n          <EditActivatorModal\n            display={modalDisplay}\n            defaultValue={dateToHours(selectedActivator?.drinkAt)}\n            onClickCancelModal={() => onClickCancelModal()}\n            onClickSaveModal={(time) => onClickSaveModal(time)}\n          />\n          <Settings\n            display={openSetting}\n            handleCloseSetting={onClickOpenSettings}\n            user={currentUser}\n          />\n        </>\n      )}\n    </>\n  );\n});\nexport default HomePage;\n"],"sourceRoot":""}
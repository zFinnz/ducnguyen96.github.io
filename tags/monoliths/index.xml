<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>monoliths on Th·ªânh tho·∫£ng ƒë√¥i l·ªùi</title><link>/tags/monoliths/</link><description>Recent content in monoliths on Th·ªânh tho·∫£ng ƒë√¥i l·ªùi</description><generator>Hugo -- gohugo.io</generator><language>vi-vn</language><copyright>ducnguyen96</copyright><lastBuildDate>Thu, 16 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/monoliths/index.xml" rel="self" type="application/rss+xml"/><item><title>Microservices v·ªõi NodeJS ph·∫ßn 11 - Code Sharing and Reuse Between Services</title><link>/posts/backend/microservices-with-node-p11/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p11/</guid><description>Ch√∫ng ta th·∫•y nh·ªØng ph·∫ßn nh∆∞ Custom Error, Auth Middleware, Request Validation l√† nh·ªØng th√†nh ph·∫ßn chung gi·ªØa c√°c server n√™n ta s·∫Ω t·∫°o ra 1 package common v√† c√†i ƒë·∫∑t package n√†y cho nh·ªØng services c·∫ßn thi·∫øt.
Options for Code Sharing C√≥ m·ªôt s·ªë c√°ch ƒë·ªÉ share code gi·ªØa c√°c services nh∆∞ sau:
Copy Paste C√°ch n√†y th√¨ h·∫≥n kh√¥ng ai mu·ªën d√πng r·ªìi, v√¨ kh√≥ c√≥ th·ªÉ ƒë·ªìng b·ªô code m·ªói khi c·∫ßn thay ƒë·ªïi common.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 10 - Intergrating a Server-Side-Rendered React App</title><link>/posts/backend/microservices-with-node-p10/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p10/</guid><description>Reminder on Server Side Rendering Basics of Next JS npm install react react-dom next Building a Next Image FROMnode:alpineWORKDIR/appCOPY package.json .RUN npm installCOPY . .CMD [&amp;#34;npm&amp;#34;, &amp;#34;run&amp;#34;, &amp;#34;dev&amp;#34;]# .dockerignorenode_modules.nextdocker build -t ducnguyen96/ticketing-client . Running Next in Kubernetes client-depl.yml
apiVersion: apps/v1 kind: Deployment metadata: name: client-depl namespace: ingress-nginx spec: replicas: 1 selector: matchLabels: app: client template: metadata: labels: app: client spec: containers: - name: client image: ducnguyen96/ticketing-client --- apiVersion: v1 kind: Service metadata: name: client-srv namespace: ingress-nginx spec: selector: app: client ports: - name: client protocol: TCP port: 3000 targetPort: 3000 skaffold.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 9 - Testing Isolated Microservices</title><link>/posts/backend/microservices-with-node-p9/</link><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p9/</guid><description>Scope of Testing Testing Goal Testing Architecture // app.ts import express from &amp;#34;express&amp;#34;; import { json } from &amp;#34;body-parser&amp;#34;; import { currentUserRouter } from &amp;#34;./routes/current-user&amp;#34;; import { signinRouter } from &amp;#34;./routes/signin&amp;#34;; import { signupRouter } from &amp;#34;./routes/signup&amp;#34;; import { signoutRouter } from &amp;#34;./routes/signout&amp;#34;; import { errorHandler } from &amp;#34;./middlewares/error-handler&amp;#34;; import { NotFoundEror } from &amp;#34;./errors/not-found-error&amp;#34;; import &amp;#34;express-async-errors&amp;#34;; import cookieSession from &amp;#34;cookie-session&amp;#34;; const app = express(); app.use(json()); app.set(&amp;#34;trust proxy&amp;#34;, true); // trust nginx app.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 8 - Authentication Strategies and Options</title><link>/posts/backend/microservices-with-node-p8/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p8/</guid><description>Fundamential Authentication Strategies 1. Sync Communication 1.1. Gateway C·∫£ 2 c√°ch tr√™n ƒë·ªÅu c√≥ nh∆∞·ª£c ƒëi·ªÉm c·ªßa sync communication
2. M·ªói service ƒë·ªÅu c√≥ th·ªÉ t·ª± authenticate ƒêi·ªÉm c·ªông: kh√¥ng ph·ª• thu·ªôc v√†o b·∫•t c·ª© service n√†o kh√°c. ƒêi·ªÉm tr·ª´: duplicate authentication cho m·ªçi service; m·ªôt s·ªë issue kh√°c m√† ch√∫ng ta s·∫Ω n√≥i ngay ·ªü ph·∫ßn d·ª©oi 2. Huge Issues with Authentication Strategies Nh∆∞ ƒë√£ n√≥i ·ªü tr√™n th√¨ ch√∫ng ta s·∫Ω ch·∫Øc ch·∫Øn s·∫Ω kh√¥ng d√πng c√°ch 1 v√† 1.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 7 - Database Management and Modeling</title><link>/posts/backend/microservices-with-node-p7/</link><pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p7/</guid><description>Createing Databases in Kubernetes npm i mongoose # auth-mongo-depl.yml apiVersion: apps/v1 kind: Deployment metadata: name: auth-mongo-depl namespace: ingress-nginx spec: replicas: 1 selector: matchLabels: app: auth-mongo template: metadata: labels: app: auth-mongo spec: containers: - name: auth-mongo image: mongo --- apiVersion: v1 kind: Service metadata: name: auth-mongo-srv namespace: ingress-nginx spec: selector: app: auth-mongo ports: - name: db protocol: TCP port: 27017 targetPort: 27017 Creating Databases in Kubernetes npm i @types/mongoose // index.ts import mongoose from &amp;#34;mongoose&amp;#34;; const start = async () =&amp;gt; { try { await mongoose.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 6 - Response Normalization Strategies</title><link>/posts/backend/microservices-with-node-p6/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p6/</guid><description>Creating Route Handlers src/ ‚îú‚îÄ routes/ ‚îÇ ‚îú‚îÄ signup.ts ‚îÇ ‚îú‚îÄ signin.ts ‚îÇ ‚îú‚îÄ signout.ts ‚îÇ ‚îú‚îÄ current-user.ts // current-user.ts import express from &amp;#34;express&amp;#34;; const router = express.Router(); router.get(&amp;#34;/api/users/currentuser&amp;#34;, (req, res) =&amp;gt; { res.send(&amp;#34;Hi there !&amp;#34;); }); export { router as currentUserRouter }; T∆∞∆°ng t·ª± v·ªõi 3 routes kia
// signup.ts import express from &amp;#34;express&amp;#34;; const router = express.Router(); router.post(&amp;#34;/api/users/signup&amp;#34;, (req, res) =&amp;gt; { res.send(&amp;#34;Hi there !&amp;#34;); }); export { router as signupRouter }; // index.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 5 - Architecture of Multi-Service Apps</title><link>/posts/backend/microservices-with-node-p5/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p5/</guid><description>Big Tickets Items Tr∆∞·ªõc khi ƒëi v√†o ph√¢n t√≠ch app ti·∫øp theo c·ªßa ch√∫ng ta, h√£y c√πng ƒëi·ªÉm qua m·ªôt s·ªë b√†i h·ªçc t·ª´ app tr∆∞·ªõc. M·ªôt trong nh·ªØng kh√≥ khƒÉn l·ªõn nh·∫•t khi th·ª±c hi·ªán ki·∫øn tr√∫c microservice l√† data. C√≥ nhi·ªÅu c√°ch giao ti·∫øp gi·ªØa c√°c services nh∆∞ng ch√∫ng ta s·∫Ω t·∫≠p trung v√†o async communication, v√¨ c√°c l·ª£i √≠ch n√≥ mang l·∫°i c≈©ng nh∆∞ sync communication th√¨ d·ªÖ d√†ng ƒë·ªÉ implement v√† kh√¥ng c√≥ g√¨ nhi·ªÅu ƒë·ªÉ n√≥i.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 4 - ƒêi·ªÅu ph·ªëi services v·ªõi Kubernetes</title><link>/posts/backend/microservices-with-node-p4/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p4/</guid><description>Installing Kubernetes C√†i ƒë·∫∑t theo ·ªü ƒë√¢y nh√©.
L∆∞u √Ω: Sau khi c√†i ƒë·∫∑t kubectl, ƒë·ªÉ ch·∫°y 1 cluster tr√™n m√°y local c·ªßa b·∫°n th√¨ ta s·∫Ω s·ª≠ d·ª•ng th√™m 1 tool g·ªçi l√† minikube. B·∫°n ƒë·ªçc t√¨m hi·ªÉu th√™m ·ªü ƒë√¢y
A Quick Kubernetes Tour Nh·ªØng thu·∫≠t ng·ªØ quan tr·ªçng trong Kubernetes Kubernetes Cluster bao g·ªìm m·ªôt ho·∫∑c nhi·ªÅu nodes (m·ªói node l√† m·ªôt m√°y ·∫£o) v√† 1 Master ƒë·ªÉ qu·∫£n l√Ω c√°c nodes.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 3 - Running Services With Docker</title><link>/posts/backend/microservices-with-node-p3/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p3/</guid><description>V·∫≠y l√† mini app c·ªßa ch√∫ng ta ƒë√£ ho√†n t·∫•t, b√¢y gi·ªù ch√∫ng ta b·∫Øt ƒë·∫ßu nghƒ© ƒë·∫øn vi·ªác deploy n√≥ online ƒë·ªÉ ng∆∞·ªùi kh√°c c√≥ th·ªÉ truy c·∫≠p v√†o.
Tr∆∞·ªõc t√™n hay xem l·∫°i app c·ªßa ch√∫ng ta ƒëang ƒë∆∞·ª£c th·ª±c thi nh∆∞ th·∫ø n√†o tr√™n local. Hi·ªán t·∫°i th√¨ m·ªói service ƒë·ªÅu ch·∫°y tr√™n 1 port c·ª• th·ªÉ v√† c√≥ th·ªÉ giao ti·∫øp v·ªõi nhau qua axios. V·∫≠y l√†m sao ta c√≥ th·ªÉ thay ƒë·ªïi 1 ch√∫t v√† deploy to√†n b·ªô app n√†y?</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 2 - m·ªôt mini-microservices app</title><link>/posts/backend/microservices-with-node-p2/</link><pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node-p2/</guid><description>·ªû b√†i tr∆∞·ªõc th√¨ ch√∫ng ta ƒë√£ th·∫•y m·ªôt v√†i notes v·ªÅ c√°ch ch√∫ng ta x·ª≠ l√Ω v·∫•n ƒë·ªÅ giao ti·∫øp gi·ªØa c√°c microservices, b√¢y gi·ªù th√¨ h√£y b·∫Øt ƒë·∫ßu vi·∫øt m·ªôt v√†i d√≤ng code n√†o üòÑ.
Gi·ªù ta s·∫Ω xem qua mock-up c·ªßa app m√† ch√∫ng ta s·∫Ω build ƒë·ªÉ c√≥ hi·ªÉu h∆°n v·ªÅ async communication. D∆∞·ªõi ƒë√¢y l√† m·ªôt v√†i ch√∫ √Ω v·ªÅ project ti·∫øp theo ch√∫ng ta s·∫Ω build.</description></item><item><title>Microservices v·ªõi NodeJS ph·∫ßn 1 - nh·ªØng √Ω t∆∞·ªüng c∆° b·∫£n v·ªÅ microservices</title><link>/posts/backend/microservices-with-node/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-with-node/</guid><description>What is a microservice ? ƒê·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y th√¨ tr∆∞·ªõc h·∫øt ta s·∫Ω review l·∫°i c√°ch ho·∫°t ƒë·ªông c·ªßa Monolithic Server.
Ch√∫ng ta c√≥ to√†n b·ªô code n·∫±m trong 1 single code base v√† ch√∫ng ta deploy nh∆∞ 1 unit.
Flow c·ªßa 1 request s·∫Ω nh∆∞ sau: ƒê·∫ßu ti√™n th√¨ c√≥ th·ªÉ ƒëi qua 1 s·ªë middleware, sau ƒë√≥ qua 1 s·ªë router, router s·∫Ω inspect request ƒë√≥ v√† g·ª≠i ƒë·∫øn feature nh·∫•t ƒë·ªãnh ƒë·ªÉ x·ª≠ l√Ω, ch·∫≥ng h·∫°n ƒë·ªçc ho·∫∑c ghi d·ªØ li·ªáu ·ªü database sau c√πng l√† g·ª≠i response l·∫°i cho ng∆∞·ªùi t·∫° request.</description></item><item><title>Microservices vs Monoliths</title><link>/posts/backend/microservices-vs-monolith/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>/posts/backend/microservices-vs-monolith/</guid><description>Trong xu h∆∞·ªõng m·ªõi n·ªïi c·ªßa microservices th√¨ c√°c cu·ªôc tranh lu·∫≠n v·ªÅ n√≥ v√† Monolith l√† kh√¥ng th·ªÉ tr√°nh kh·ªèi. Ki·∫øn tr√∫c microservices cung c·∫•p nh·ªØng l·ª£i √≠ch nh∆∞ kh·∫£ nƒÉng m·ªü r·ªông ,t√≠nh linh tho·∫°t v√† l√† m·ªôt c√°ch hi·ªáu qu·∫£ v·ªÅ chi ph√≠ ƒë·ªëi v·ªõi nh·ªØng ·ª©ng d·ª•ng nhi·ªÅu t√≠nh nƒÉng. Nh·ªØng g√£ kh·ªïng l·ªì v·ªÅ c√¥ng ngh·ªá nh∆∞ Netflix, Amazon v√† Oracle th∆∞·ªùng tri·ªÉn khai ki·∫øn tr√∫c microservice trong 1 ho·∫∑c nhi·ªÅu ·ª©ng d·ª•ng.</description></item></channel></rss>